import { snakeCase } from 'change-case-all';
import { Kind, EnumValueDefinitionNode } from 'graphql';
import { Config } from '../config/config-value';
import { FlutterFreezedPluginConfig, NodeType } from '../config/plugin-config';
import { nodeIsObjectType } from '../utils';
import { ClassBlock } from './class-block';
import { EnumBlock } from './enum-block';
import { NodeRepository } from './node-repository';

//#region Step 01. Start Here
/**
 *  Returns a string of import statements placed at the top of the file that contains generated models
 * @param fileName The name of the file where the generated Freezed models will be saved to. This is used to import the library part files generated by Freezed. This value must be set in the plugin's config
 * @returns a string of import statements
 */
export const buildImportStatements = (fileName: string) => {
  if (fileName.length < 1) {
    throw new Error('fileName is required and must not be empty');
  }
  const segments = fileName.split('/');
  const target = segments[segments.length - 1];
  const expectedFileName = snakeCase(target.replace(/\.dart/g, ''));
  return [
    `import 'package:freezed_annotation/freezed_annotation.dart';\n`,
    `import 'package:flutter/foundation.dart';\n\n`,
    `part '${expectedFileName}.freezed.dart';\n`,
    `part '${expectedFileName}.g.dart';\n\n`,
  ].join('');
};

/**
 * Transforms the AST nodes into  Freezed classes/models
 * @param config The plugin configuration object
 * @param node the AST node passed by the schema visitor
 * @param nodeRepository A map that stores the name of the Graphql Type as the key and it AST node as the value. Used to build FactoryBlocks from placeholders for mergedInputs and Union Types
 * @returns a string output of a `FreezedDeclarationBlock` which represents a Freezed class/model in Dart
 */
export const buildBlock = (config: FlutterFreezedPluginConfig, node: NodeType, nodeRepository: NodeRepository) => {
  // ignore these...
  if (['Query', 'Mutation', 'Subscription', ...Config.ignoreTypes()].includes(node.name.value)) {
    return '';
  }

  // registers all the ObjectTypes
  if (nodeIsObjectType(node)) {
    nodeRepository.register(node);
  }

  return node.kind === Kind.ENUM_TYPE_DEFINITION ? EnumBlock.build(config, node) : ClassBlock.build(config, node);
};

export const buildComment = (node?: NodeType | EnumValueDefinitionNode): string => {
  const comment = node?.description?.value;
  console.log('ðŸš€ ~ file: index.ts:54 ~ buildComment ~ comment', comment);

  return comment && comment?.length > 0 // TODO: Test this
    ? `${comment
        .trim()
        .split(/\n/gm)
        .map(c => `/// ${c.trim()}\n`)
        .join('')
        .replace(/\s*(#|""")\s*/gm, ' ')}`
    : '';
};
//#endregion
